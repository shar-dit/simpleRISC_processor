module tb_SimpleRISC;

    reg clk, reset;
    wire [31:0] instr_out;

    // Instantiate the processor
    SimpleRISC uut (
        .clk(clk),
        .reset(reset)
    );

    // Clock generation
    always #5 clk = ~clk;

    initial begin
        // Initialize clock and reset
        clk = 0;
        reset = 1;
        #10 reset = 0;

        // Load instructions into instruction memory
        // Format: opcode | rd | rn | rm | imm16
        // opcode: 0000 = ADD, 0001 = SUB, 0010 = MOV, 0011 = LOAD, 0100 = STORE, 0101 = BRANCH

        // MOV R1, #10 (0010_0001_0000_xxxx_0000_0000_0000_1010)
        uut.instr_mem[0] = 32'b00100001000000000000000000001010;

        // MOV R2, #5
        uut.instr_mem[1] = 32'b00100010000000000000000000000101;

        // ADD R3, R1, R2 (0000_0011_0001_0010_0000000000000000)
        uut.instr_mem[2] = 32'b00000011000100100000000000000000;

        // STORE R3 at [R0 + 4]
        uut.instr_mem[3] = 32'b01000011000000000000000000000100;

        // LOAD R4 from [R0 + 4]
        uut.instr_mem[4] = 32'b00110100000000000000000000000100;

        // BRANCH to +2 (jump to instruction 7)
        uut.instr_mem[5] = 32'b01010000000000000000000000000010;

        // MOV R5, #99 (this should be skipped)
        uut.instr_mem[6] = 32'b00100101000000000000000001100011;

        // MOV R6, #123 (will execute after branch)
        uut.instr_mem[7] = 32'b00100110000000000000000001111011;

        // Finish after some time
        #200;

        // Display register contents
        $display("R1 = %d", uut.reg_file[1]);
        $display("R2 = %d", uut.reg_file[2]);
        $display("R3 = %d", uut.reg_file[3]);
        $display("R4 = %d", uut.reg_file[4]);
        $display("R5 = %d", uut.reg_file[5]);
        $display("R6 = %d", uut.reg_file[6]);
        $display("MEM[1] = %d", uut.data_mem[1]);  // 4/4 = 1

        $finish;
    end

endmodule
